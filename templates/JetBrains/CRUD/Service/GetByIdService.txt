<?php
declare(strict_types = 1);

namespace App\Module\\${NAME}\Service;

use App\Core\Exception\NotFoundException;
use App\Core\Exception\RequiredParamException;
use App\Module\\${NAME}\Repository\I${NAME}Repository;

interface IGet${NAME}ByIdService {
    #if (${UUID} != "")
	public function run(string ${DS}uuid): array;
	#end
	#if (${UUID} == "")
	public function run(string ${DS}id): array;
	#end
}

class Get${NAME}ByIdService implements IGet${NAME}ByIdService {
	public function __construct(protected I${NAME}Repository ${DS}repository) {}
    #if (${UUID} != "")
	public function run(string ${DS}uuid): array {
        if(trim(${DS}uuid) === '') {
            throw new RequiredParamException(['uuid']);
        }

        ${DS}entity = ${DS}this->repository->getByUUId(${DS}uuid);
     #end
     #if (${UUID} == "")
     public function run(string ${DS}id): array {
        if(trim(${DS}id) === '') {
            throw new RequiredParamException(['id']);
        }

        ${DS}entity = ${DS}this->repository->getById(${DS}id);
     #end
        
        if (empty(${DS}entity)) {
            throw new NotFoundException('${NAME}');
        }
        
        ${DS}oDTO = [
            ${DS}entity
        ];

        return [
            'data' => ${DS}oDTO
        ];
	}
}